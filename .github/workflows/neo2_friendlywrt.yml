name: FriendlyWrt for NanoPi-NEO2

on:
  repository_dispatch:
  push:
    branches: 
      - master
    paths:
      - 'changelog/neo2.md'
  schedule:
    - cron: '10 0 * * *'

jobs:

  build:
    
    runs-on: ubuntu-18.04
    if: github.repository == 'vinewx/NanoWrt'
    
    steps:
      
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d
          sudo apt-get update
          sudo apt-get -y install subversion bc build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          wget -O - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | bash
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk
          
      - name: Install Repo
        run: |
          git clone https://github.com/friendlyarm/repo
          sudo cp repo/repo /usr/bin/
          
      - name: Init Source
        run: |
          mkdir friendlywrt-h5
          cd friendlywrt-h5
          repo init -u https://github.com/friendlyarm/friendlywrt_manifests -b master -m h5.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle
          repo sync -c --no-tags --no-clone-bundle -j8

      - name: Mods
        run: |
          chmod +x scripts/*
          cd friendlywrt-h5
          . ../scripts/pure_config.sh
          cat ../app_config.seed >> configs/config_h5
          cat ../oled_config.seed >> configs/config_h5
          sed -i 's/dnsmasq /dnsmasq-full /' friendlywrt/include/target.mk
          cd friendlywrt
          cp ../../scripts/settings.sh package/base-files/files/root/
          chmod +x package/base-files/files/root/settings.sh
          sed -i '/touch/i\    /root/settings.sh' package/base-files/files/etc/rc.local
          sed -i '/touch/a\    /etc/init.d/system reload' package/base-files/files/etc/rc.local
          sed -i '/touch/a\    echo /etc/firstboot_${board} >> /etc/sysupgrade.conf' package/base-files/files/etc/rc.local
          cd package
          svn co https://github.com/coolsnowwolf/lede/trunk/package/lean/autocore
          git clone https://github.com/maxlicheng/luci-app-unblockmusic.git
          cd luci-app-unblockmusic
          git checkout bd05512a47dcbf25d62aaaab4d41808792339b16
          cd ../
          git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git
          cd ../
          mkdir -p package/luci-lib-docker
          wget https://raw.githubusercontent.com/lisaac/luci-lib-docker/master/Makefile -O package/luci-lib-docker/Makefile
          mkdir -p package/luci-app-dockerman
          wget https://raw.githubusercontent.com/lisaac/luci-app-dockerman/master/Makefile -O package/luci-app-dockerman/Makefile
          mkdir -p package/luci-app-diskman
          wget https://raw.githubusercontent.com/lisaac/luci-app-diskman/master/Makefile -O package/luci-app-diskman/Makefile
          mkdir -p package/parted
          wget https://raw.githubusercontent.com/lisaac/luci-app-diskman/master/Parted.Makefile -O package/parted/Makefile
          
      - name: Install OpenClash
        run: |
          cd friendlywrt-h5/friendlywrt/package
          svn co https://github.com/vernesong/OpenClash/trunk/luci-app-openclash

      - name: Install Clash Binaries
        run: |
          cd friendlywrt-h5/friendlywrt/package/base-files/files
          mkdir -p etc/openclash/core
          wget -qO- https://github.com/Dreamacro/clash/releases/download/v0.19.0/clash-linux-armv8-v0.19.0.gz | gunzip -c > etc/openclash/core/clash
          chmod +x etc/openclash/core/clash

      - name: Clean Feeds
        run: |
          cd friendlywrt-h5/friendlywrt
          ./scripts/feeds clean -a
          sed -i '/luci/Id;' feeds.conf.default
          sed -i '/routing/i\src-git luci https://github.com/coolsnowwolf/luci' feeds.conf.default
          sed -i '/routing/a\src-git NanoHatOLED https://github.com/vinewx/NanoHatOLED.git' feeds.conf.default

      - name: Build FriendlyWrt
        run: |
          cd friendlywrt-h5
          sed -i 's/set -eu/set -u/' scripts/mk-friendlywrt.sh
          sed -i '/install/i\./../../scripts/enable_autocore.sh' scripts/mk-friendlywrt.sh
          ./build.sh nanopi_neo2.mk
      
      - name: Zip Files
        run: |
          gzip friendlywrt-h5/out/*.img

      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          cp friendlywrt-h5/friendlywrt/.config ./artifact/
          config_name="NEO2_v$(date "+%Y%m%d")_Config"

          release_tag="v$(date "+%Y%m%d")_NEO2"

          sd_path="./friendlywrt-h5/out/FriendlyWrt_$(date +%Y%m%d)_NanoPi-NEO2_aarch64_sd.img.gz"
          sd_name="FriendlyWrt_$(date +%Y%m%d)_NanoPi-NEO2_aarch64_sd.img.gz"        
          echo "##[set-output name=config_name;]$config_name"
          echo "##[set-output name=release_tag;]$release_tag"
          echo "##[set-output name=sd_path;]$sd_path"
          echo "##[set-output name=sd_name;]$sd_name"

      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.assemble_artifact.outputs.config_name }}
          path: ./artifact/

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.sec_token }}
        with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: Automatic Release ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false

      - name: Upload SD Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.sec_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.assemble_artifact.outputs.sd_path }}
          asset_name: ${{ steps.assemble_artifact.outputs.sd_name }}
          asset_content_type: application/gz
